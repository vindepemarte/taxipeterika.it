import { NextApiRequest, NextApiResponse } from 'next'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '../../../lib/authOptions'
import { prisma } from '../../../lib/db'
import { generatePetPassCode, hashPassword } from '../../../lib/utils'
import QRCode from 'qrcode'
import { writeFileSync, mkdirSync } from 'fs'
import { join } from 'path'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getServerSession(req, res, authOptions)

  if (!session?.user?.id) {
    return res.status(401).json({ message: 'Unauthorized' })
  }

  if (req.method === 'POST') {
    return await createPetPass(req, res, session.user.id)
  } else if (req.method === 'GET') {
    return await getUserPetPasses(req, res, session.user.id)
  } else {
    return res.status(405).json({ message: 'Method not allowed' })
  }
}

async function createPetPass(req: NextApiRequest, res: NextApiResponse, userId: string) {
  try {
    const {
      // Pet Data
      petName,
      species,
      breed,
      sex,
      dateOfBirth,
      colorMarkings,
      microchipNumber,
      petPhotoUrl,
      // Owner & Contact Data
      ownerName,
      ownerAddress,
      ownerPhone,
      ownerEmail,
      emergencyContactName,
      emergencyContactPhone,
      vetName,
      vetPhone,
      // Medical Data
      medicalConditions,
      allergies,
      currentMedications,
      additionalNotes,
      // Security & Customization
      protectedFields,
      ownerAccessPassword,
      backgroundColor
    } = req.body

    // Validation
    if (!petName || !species || !ownerName || !ownerPhone || !ownerEmail) {
      return res.status(400).json({ message: 'Missing required fields' })
    }

    // Generate unique code
    let autoGeneratedCode: string
    let isUnique = false
    
    while (!isUnique) {
      autoGeneratedCode = generatePetPassCode()
      const existing = await prisma.petPass.findUnique({
        where: { autoGeneratedCode }
      })
      if (!existing) isUnique = true
    }

    // Hash owner access password if provided
    let ownerAccessPasswordHash: string | undefined
    if (ownerAccessPassword) {
      ownerAccessPasswordHash = await hashPassword(ownerAccessPassword)
    }

    // Create PetPass
    const petpass = await prisma.petPass.create({
      data: {
        userId,
        autoGeneratedCode: autoGeneratedCode!,
        petName,
        species,
        breed,
        sex,
        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,
        colorMarkings,
        microchipNumber,
        petPhotoUrl,
        ownerName,
        ownerAddress,
        ownerPhone,
        ownerEmail,
        emergencyContactName,
        emergencyContactPhone,
        vetName,
        vetPhone,
        medicalConditions,
        allergies,
        currentMedications,
        additionalNotes,
        protectedFields: protectedFields || [],
        ownerAccessPasswordHash,
        backgroundColor: backgroundColor || '#ffffff',
      }
    })

    // Generate QR Code
    const petPassUrl = `${process.env.APP_URL || 'http://localhost:3000'}/petpass/${petpass.autoGeneratedCode}`
    const qrCodePath = join(process.cwd(), 'public', 'qrcodes')
    
    // Ensure directory exists
    try {
      mkdirSync(qrCodePath, { recursive: true })
    } catch (error) {
      // Directory might already exist
    }

    const qrCodeFilename = `${petpass.autoGeneratedCode}.png`
    const qrCodeFullPath = join(qrCodePath, qrCodeFilename)

    await QRCode.toFile(qrCodeFullPath, petPassUrl, {
      type: 'png',
      width: 300,
      margin: 2,
    })

    res.status(201).json({
      message: 'PetPass created successfully',
      petpass: {
        id: petpass.id,
        autoGeneratedCode: petpass.autoGeneratedCode,
        petName: petpass.petName,
        url: petPassUrl,
        qrCodeUrl: `/qrcodes/${qrCodeFilename}`
      }
    })

  } catch (error) {
    console.error('PetPass creation error:', error)
    res.status(500).json({ message: 'Internal server error' })
  }
}

async function getUserPetPasses(req: NextApiRequest, res: NextApiResponse, userId: string) {
  try {
    const petpasses = await prisma.petPass.findMany({
      where: { 
        userId,
        isActive: true 
      },
      select: {
        id: true,
        autoGeneratedCode: true,
        petName: true,
        species: true,
        breed: true,
        createdAt: true,
        metalTag: {
          select: {
            id: true,
            status: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    })

    res.status(200).json({ petpasses })

  } catch (error) {
    console.error('Get user petpasses error:', error)
    res.status(500).json({ message: 'Internal server error' })
  }
} 