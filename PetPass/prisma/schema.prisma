// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password_hash String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  petPasses     PetPass[]
  subscriptions Subscription[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PetPass {
  id                       String    @id @default(cuid())
  userId                   String    @map("user_id")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  autoGeneratedCode        String    @unique @map("auto_generated_code")
  
  // Pet Data
  petName                  String    @map("pet_name")
  species                  String
  breed                    String?
  sex                      String?
  dateOfBirth              DateTime? @map("date_of_birth") @db.Date
  colorMarkings            String?   @map("color_markings") @db.Text
  microchipNumber          String?   @map("microchip_number")
  petPhotoUrl              String?   @map("pet_photo_url") @db.Text

  // Owner & Contact Data
  ownerName                String    @map("owner_name")
  ownerAddress             String?   @map("owner_address") @db.Text
  ownerPhone               String    @map("owner_phone")
  ownerEmail               String    @map("owner_email")
  emergencyContactName     String?   @map("emergency_contact_name")
  emergencyContactPhone    String?   @map("emergency_contact_phone")
  vetName                  String?   @map("vet_name")
  vetPhone                 String?   @map("vet_phone")

  // Medical Data
  medicalConditions        String?   @map("medical_conditions") @db.Text
  allergies                String?   @db.Text
  currentMedications       String?   @map("current_medications") @db.Text
  additionalNotes          String?   @map("additional_notes") @db.Text

  // Security & Customization
  protectedFields          Json      @map("protected_fields") @default("[]")
  ownerAccessPasswordHash  String?   @map("owner_access_password_hash")
  backgroundColor          String    @map("background_color") @default("#ffffff")

  // Status
  isActive                 Boolean   @default(true) @map("is_active")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  metalTag                 MetalTag?

  @@map("petpasses")
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @map("user_id")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId       String    @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  status                 String
  planType               String    @map("plan_type") // 'monthly', 'annual', 'free'
  currentPeriodStart     DateTime? @map("current_period_start")
  currentPeriodEnd       DateTime? @map("current_period_end")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model MetalTag {
  id               String    @id @default(cuid())
  petpassId        String    @unique @map("petpass_id")
  petpass          PetPass   @relation(fields: [petpassId], references: [id], onDelete: Cascade)
  orderId          String?   @map("order_id") @unique
  shippingAddress  String    @map("shipping_address") @db.Text
  status           String
  trackingNumber   String?   @map("tracking_number")
  orderedAt        DateTime  @default(now()) @map("ordered_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("metal_tags")
} 